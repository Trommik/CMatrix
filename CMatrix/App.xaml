<Application x:Class="CMatrix.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:CMatrix"
             xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
             StartupUri="MainWindow.xaml">

    <Application.Resources>
        <ResourceDictionary>

            <!--Adds the MahApps.Metro Theme. Info: http://mahapps.com/guides/quick-start.html#installation-->
            <ResourceDictionary.MergedDictionaries>
                <!-- MahApps.Metro resource dictionaries. Make sure that all file names are Case Sensitive! -->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
                <!-- Accent and AppTheme setting -->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Blue.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseDark.xaml" />


                <!--My Colors-->
                <ResourceDictionary Source="Themes/Colors.xaml"/>
                
            </ResourceDictionary.MergedDictionaries>
            
            
            <!--Custom style for the MetroGroupBox-->
            <Style TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MetroGroupBox}">
                <Setter Property="Margin" Value="0" />
                <Setter Property="Background" Value="{DynamicResource Gray7}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Gray7}" />

                <Setter Property="controls:ControlsHelper.ContentCharacterCasing" Value="Normal"/>

                <Setter Property="controls:GroupBoxHelper.HeaderForeground" Value="{DynamicResource GrayNormal}" />
            </Style>
            <!--Custom style for the MetroGroupBox ENDE-->

            
            <!--Custom style for the MetroTabItems with TabStipPlacment = Bottom-->
            <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource MetroTabItem}" >
                <Setter Property="BorderBrush" Value="{DynamicResource Gray7}"/>

                <Style.Triggers>
                    <!--TabPlacment = Bottom-->
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="TabStripPlacement" Value="Bottom" />
                            <Condition Property="IsSelected" Value="true" />
                        </MultiTrigger.Conditions>
                        <MultiTrigger.Setters>
                            <Setter Property="Margin" Value="0,-1,0,0"/>

                            <Setter Property="Background" Value="{DynamicResource Gray4}"/>
                            <Setter Property="BorderThickness" Value="1,0,1,1"/>
                        </MultiTrigger.Setters>
                    </MultiTrigger>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="TabStripPlacement" Value="Bottom" />
                            <Condition Property="IsSelected" Value="false" />
                        </MultiTrigger.Conditions>
                        <MultiTrigger.Setters>
                            <Setter Property="Background" Value="{DynamicResource Gray14}"/>
                            <Setter Property="BorderThickness" Value="0"/>

                        </MultiTrigger.Setters>
                    </MultiTrigger>
                    
                    <!--TabPlacment = Top-->
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="TabStripPlacement" Value="Top" />
                            <Condition Property="IsSelected" Value="true" />
                        </MultiTrigger.Conditions>
                        <MultiTrigger.Setters>
                            <Setter Property="Margin" Value="0,0,0,-1"/>

                            <Setter Property="Background" Value="{DynamicResource Gray4}"/>
                            <Setter Property="BorderThickness" Value="1,1,1,0"/>
                        </MultiTrigger.Setters>
                    </MultiTrigger>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="TabStripPlacement" Value="Top" />
                            <Condition Property="IsSelected" Value="false" />
                        </MultiTrigger.Conditions>
                        <MultiTrigger.Setters>
                            <Setter Property="Background" Value="{DynamicResource Gray14}"/>
                            <Setter Property="BorderThickness" Value="0"/>

                        </MultiTrigger.Setters>
                    </MultiTrigger>
                </Style.Triggers>
            </Style>
            <!--Custom style for the MetroTabItems ENDE-->

            
            
            <!--Custom style for the MenuItems-->
            <!--<Style TargetType="{x:Type MenuItem}" >
                <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Border x:Name="Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition x:Name="Col0" MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                        <ColumnDefinition x:Name="Col3" Width="14"/>
                                    </Grid.ColumnDefinitions>

                                    --><!-- ContentPresenter to show an Icon if needed --><!--
                                    <ContentPresenter Grid.Column="0" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>

                                    --><!-- Glyph is a checkmark if needed for a checkable menu --><!--
                                    <Grid Grid.Column="0" Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                        <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
                                    </Grid>

                                    --><!-- Content for the menu text etc --><!--
                                    <ContentPresenter Grid.Column="1"
                                          Margin="{TemplateBinding Padding}"
                                          x:Name="HeaderHost"
                                          RecognizesAccessKey="True"
                                          ContentSource="Header"/>

                                    --><!-- Content for the menu IGT --><!--
                                    <ContentPresenter Grid.Column="2"
                                          Margin="8,1,8,1"
                                          x:Name="IGTHost"
                                          ContentSource="InputGestureText"
                                          VerticalAlignment="Center"/>

                                    --><!-- Arrow drawn path which points to the next level of the menu --><!--
                                    <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                        <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
                                    </Grid>

                                    --><!-- The Popup is the body of the menu which expands down or across depending on the level of the item --><!--
                                    <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                        <Border x:Name="SubMenuBorder" BorderBrush="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}" BorderThickness="1" Padding="2,2,2,2">
                                            <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                                --><!-- StackPanel holds children of the menu. This is set by IsItemsHost=True --><!--
                                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                            </Grid>
                                        </Border>
                                    </Popup>
                                </Grid>
                            </Border>

                            --><!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role --><!--
                            <ControlTemplate.Triggers>
                                --><!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down --><!--
                                <Trigger Property="Role" Value="TopLevelHeader">
                                    <Setter Property="Padding" Value="6,1,6,1"/>
                                    <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                                    <Setter Property="MinWidth" Value="0" TargetName="Col0"/>
                                    <Setter Property="Width" Value="Auto" TargetName="Col3"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                                </Trigger>

                                --><!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items--><!--
                                <Trigger Property="Role" Value="TopLevelItem">
                                    <Setter Property="Padding" Value="6,1,6,1"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                                </Trigger>

                                --><!-- Role = SubMenuHeader : this is a child menu item which does not have children --><!--
                                <Trigger Property="Role" Value="SubmenuHeader">
                                    <Setter Property="DockPanel.Dock" Value="Top"/>
                                    <Setter Property="Padding" Value="0,2,0,2"/>
                                </Trigger>

                                --><!-- Role = SubMenuItem : this is a child menu item which has children--><!--
                                <Trigger Property="Role" Value="SubmenuItem">
                                    <Setter Property="DockPanel.Dock" Value="Top"/>
                                    <Setter Property="Padding" Value="0,2,0,2"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                                </Trigger>
                                <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                                    <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                                </Trigger>

                                --><!-- If no Icon is present the we collapse the Icon Content --><!--
                                <Trigger Property="Icon" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                                </Trigger>

                                --><!-- The GlyphPanel contains the CheckMark --><!--
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                                </Trigger>

                                --><!-- Using the system colors for the Menu Highlight and IsEnabled--><!--
                                <Trigger Property="IsHighlighted" Value="true">
                                    <Setter Property="Background" Value="LightGray" TargetName="Border"/>
                                    <Setter Property="Foreground" Value="Black"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="LightGray"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>-->
            <!--Custom style for the MetroMenuItems ENDE-->

            <!--Horizontal GridSplitter-->
            <Style x:Key="GridSplitterHorizontalGripStyle" TargetType="{x:Type GridSplitter}">
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="Cursor" Value="SizeNS" />
                
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GridSplitter}">
                            <Border 
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                Height="{TemplateBinding Height}">
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="MyHoriGridSplitter" TargetType="{x:Type GridSplitter}" BasedOn="{StaticResource GridSplitterHorizontalGripStyle}">
                <Setter Property="Height" Value="5" />
                <Setter Property="VerticalAlignment" Value="Stretch" />
            </Style>
            <!--Horizontal GridSplitter ENDE-->


            <!--Vertical GridSplitter-->
            <Style x:Key="GridSplitterVerticalGripStyle" TargetType="{x:Type GridSplitter}">
                <Setter Property="VerticalAlignment" Value="Stretch" />
                <Setter Property="Cursor" Value="SizeWE" />
                
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GridSplitter}">
                            <Border 
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                Width="{TemplateBinding Width}">
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="MyVertGridSplitter" TargetType="{x:Type GridSplitter}" BasedOn="{StaticResource GridSplitterVerticalGripStyle}">
                <Setter Property="Width" Value="5" />
                <Setter Property="HorizontalAlignment" Value="Stretch" />
            </Style>
            <!--Vertical GridSplitter ENDE-->

        </ResourceDictionary>
    </Application.Resources>
    
    
</Application>
